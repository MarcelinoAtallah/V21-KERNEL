package com.valoores.inDisplayApplication.app.formBuilder.service;

import java.rmi.RemoteException;
import java.util.List;
import java.util.concurrent.CompletableFuture;

import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;

import com.fasterxml.jackson.databind.node.ObjectNode;
import com.valoores.inDisplayApplication.app.formBuilder.dto.AdvancedResultDto;
import com.valoores.inDisplayApplication.app.formBuilder.dto.AfterSaveDto;
import com.valoores.inDisplayApplication.app.formBuilder.dto.ButtonDto;
import com.valoores.inDisplayApplication.app.formBuilder.dto.CustomAPIDto;
import com.valoores.inDisplayApplication.app.formBuilder.dto.FieldOrderNo;
import com.valoores.inDisplayApplication.app.formBuilder.dto.FieldSetDto;
import com.valoores.inDisplayApplication.app.formBuilder.dto.FormBuilderDto;
import com.valoores.inDisplayApplication.app.formBuilder.dto.FormBuilderTableDto;
import com.valoores.inDisplayApplication.app.formBuilder.dto.InsertCustomField;
import com.valoores.inDisplayApplication.app.formBuilder.dto.ProcedureDto;
import com.valoores.inDisplayApplication.app.formBuilder.dto.RelationBetweenTablesDto;
import com.valoores.inDisplayApplication.app.formBuilder.dto.V21FilesDto;
import com.valoores.inDisplayApplication.app.formBuilder.dto.V21SignatureDto;
import com.valoores.inDisplayApplication.app.formBuilder.dto.DynamicForm.DynamicFormDto;
import com.valoores.inDisplayApplication.app.formBuilder.dto.DynamicForm.DynamicFormGet;
import com.valoores.inDisplayApplication.app.formBuilder.dto.DynamicSearch.DynamicSearchDto;
import com.valoores.inDisplayApplication.app.formBuilder.dto.QBEParamDto.QbeIdDto;
import com.valoores.inDisplayApplication.app.formBuilder.dto.QBEParamDto.QueryFormDto;
import com.valoores.inDisplayApplication.app.formBuilder.model.CfgColumnConfigModel;
import com.valoores.inDisplayApplication.app.formBuilder.model.CfgColumnGroupModel;
import com.valoores.inDisplayApplication.app.formBuilder.model.CfgObjectDefMenus;
import com.valoores.inDisplayApplication.app.formBuilder.model.CfgObjectDefModel;
import com.valoores.inDisplayApplication.app.formBuilder.model.QbeUserQueryModel;
import com.valoores.inDisplayApplication.app.formBuilder.model.DynamicRuleBuilder.RuleBuilderComboModel;
import com.valoores.inDisplayApplication.app.formBuilder.model.DynamicRuleBuilder.TechDynamicRuleBuilder;
import com.valoores.inDisplayApplication.backend.CustomResponse;
import java.rmi.RemoteException;

public interface IFormBuilderService {
	List<ObjectNode> getAllTables();
	List<CfgObjectDefModel> getAllMenus();
	CustomResponse createFormBuilder(List<FormBuilderDto> formBuilderDto);
	CfgObjectDefModel findByMenuId(long objectId);
	List<CfgObjectDefModel> findByObjectPId(long objectId);
	List<CfgObjectDefModel> getAllTabs(long objectId);
	List<ObjectNode> getAllColumns(long objectId);
	List<ObjectNode> getAllColumnsSuspended(long objectId);
	CustomResponse deleteFormBuilder(long objectId);
	CustomResponse createTab(List<FormBuilderDto> formBuilderDto);
	CustomResponse updateTab(long objectId,List<FormBuilderDto> formBuilderDto);
	List<ObjectNode> getTabConfiguration(long objectId);
	CustomResponse deleteTab(long objectId,long userId);
	List<QbeUserQueryModel> getSourceQuery();
	List<ObjectNode> getGroupingTables();
	List<ObjectNode> getSelectedRows(long objectId);
	List<ObjectNode> getTableInfo(long objectId, String tableName, String ownerName, String columnName);
	CustomResponse updateGrid(long objectId, List<FormBuilderTableDto> formBuilderTableDto);
	CustomResponse columnModifier(long columnId,List<FormBuilderDto> formBuilderDto,long userId);
	List<ObjectNode> getColumnConfiguration(long columnId);
	List<ObjectNode> checkColumnsExist(long objectId,long tableId);
	CustomResponse insertDynQuery(List<DynamicFormGet> dynamicFormGet);
	String getDynamicGridHeaders(List<DynamicFormGet> dynamicGridQuery);
	List<ObjectNode> getDynamicGridData(List<DynamicFormGet> dynamicFormGet);
	CustomResponse getColumnId(String tableName);
	String getDynamicFormData(List<DynamicFormGet> dynamicFormGet);
	CustomResponse updateDynForm(List<DynamicFormGet> dynamicFormGet);
	CustomResponse dynamicDeleteFormBuilder(List<DynamicFormGet> dynamicFormGet);
	List<ObjectNode> getQbeId(long qbeId, long queryType , List<QbeIdDto> qbeIdDto);
	List<String> GetCol(String TableName);
	String GetSequence(DynamicFormDto inserDynamicDto);
	public String getParamsName(long queryId);
	CustomResponse addFieldSet(List<FieldSetDto> fieldSetDto);
	CustomResponse updateFieldSet(List<FieldSetDto> fieldSetDto);
	List<CfgColumnGroupModel> getAllFieldSetsCombo(long objectId);
	List<CfgColumnGroupModel> getFieldSetData(long objectId, long fieldsetId);
	CustomResponse createFormButton(long objectId, ButtonDto buttonDto);
	CustomResponse updateFormButton(long objectId, ButtonDto buttonDto);
	CfgColumnConfigModel getButtonData(long buttonId);
	CustomResponse deleteFieldSet(long fieldSetId);
	List<CfgObjectDefMenus> getMenusButton();
	CustomResponse deleteButton(long buttonId,long objectId,long userId);
	List<String> dynamicSearch(DynamicSearchDto dynamicSearchDto);
	List<String> getDynamicGridDataInsert(List<DynamicFormDto> dynamicSearchDto);
	List<ObjectNode> GetColVal(String TableName);
	List<ObjectNode> getAllTablesVal();
	List<ObjectNode> getTabTables(long objectId);
	List<ObjectNode> getOneTables(long objectId,long tableId);
	List<ObjectNode> getTabTablesFormRecords(long objectId, long tableId);
	List<RuleBuilderComboModel> getDBRCombo(long objectId, long columnId);
	//List<TechDynamicRuleBuilder> getDBRGrid(long objectId, long columnId);
	List<ObjectNode> getDBRGrid(long objectId, long columnId);
	CustomResponse deleteDRBRule(long ruleId,long userId);
	CustomResponse updateDRBRule(long ruleId, List<TechDynamicRuleBuilder> techDynamicRuleBuilder);
	CustomResponse saveDRBRule(List<TechDynamicRuleBuilder> techDynamicRuleBuilder);
	List<TechDynamicRuleBuilder> getDBRInfo(long ruleId);
	String getOrders(long objectId,String orderNo,String type);
	List<ObjectNode> GetColValLkp(String TableName);
	CustomResponse getRelationBetween2tables(RelationBetweenTablesDto relationTablesDto);
	List<TechDynamicRuleBuilder> getDBRGridByRuleActionAndObjectId(long objectId, long ruleAction, long columnId);
	List<TechDynamicRuleBuilder> getDBRGridByRuleActionAndRuleId(long objectId, long ruleAction, long ruleId);
	String getPrimaryKey(String tableName);
	List<ObjectNode> getTabTables2(long objectId);
	List<ObjectNode> fieldOrderManagement(long objectId);
	CustomResponse updateFieldOrder(List<FieldOrderNo> fieldOrderNo);
	List<ObjectNode> getAllProcAndPack();
	String callApi(AfterSaveDto AfterSaveDto);
	CustomResponse callProcedure(ProcedureDto procuderDto);
	List<AdvancedResultDto> getAdvancedResult(List<AdvancedResultDto> addList);
	String GetSequenceWithStaticTable(String tableName);
	CustomResponse insertCustomField(List<InsertCustomField> insertCustomField);
	String sendForApproval(ProcedureDto ProcedureDto);
	List<ObjectNode> getColumnsSelected(int tableId);
	List<ObjectNode> getFieldDependencies(long objectId);
	List<ObjectNode> getColNameAndColId(List<Integer> columnId);
	CustomResponse CallCheckExisting(CustomAPIDto parameters);
	List<ObjectNode> getTablesLinkedToForm(int objectId);
	String getColNameByColumnId(int columnId);
	CustomResponse Validate(CustomAPIDto parameters);
//	CustomResponse ValidateCheckExisting(CustomAPIDto parameters);
	CustomResponse CallCheckExistingGeneralInfo(CustomAPIDto parameters);
	List<ObjectNode> getAllButtons(long objectId);
	void callProcedurev21Files(V21FilesDto v21FilesDto);
	List<ObjectNode> fetchDialNums();
	void callProcedurev21Signature(V21SignatureDto v21SignatureDto);
	
	public CompletableFuture<Integer> insertQueryForm(QueryFormDto queryFormDto);
	public List<List<ObjectNode>> getQueryForm(long ruleCode);
	
	public String getQbeName( long qbeId);
	public int checkIfConditionExists(long ruleCode);
	public int updateQueryForm(QueryFormDto queryFormDto);
	public List<ObjectNode> getColumnsQuery(long queryId);
	public String getQueryFormButton(long objectId);
	public List<ObjectNode> getQueryFormButtonJSON(long objectId);
	public List<ObjectNode> getQueryParams(long queryId);
	//List<ObjectNode> getDynReports();
	int insertDynamicReportForm(long userId,String reportName,List<DynamicFormGet> dynamicFormGet);
	int insertDynamicReportGrid(long userId,String reportName,String selectedRows);
	int updateDynamicReportForm(long userId,long reportId,List<DynamicFormGet> dynamicFormGet);
	int updateDynamicReportGrid(long userId,long reportId,String selectedRows);
	public List<List<ObjectNode>> getDynamicReportResult(long reportId,List<DynamicFormGet> dynamicFormGet);

	public List<ObjectNode> getDynamicReportData(long reportId);
	public String GetAllCustDocumnet(long customer_id);
	CustomResponse GetScheduleApi(long activity_id) throws RemoteException;
	CustomResponse GetRunApi(String ruleId) throws RemoteException;
	List<ObjectNode> getApiColumnName(String columnsIdsString);
	public CustomResponse JasonBuilder(String Jbuilder) throws RemoteException;

	  
	public List<ObjectNode> exportRules(String ruleIds);
	public int importDynamicRules(long objectId, List<ObjectNode> dynamicRulesData);

	
}